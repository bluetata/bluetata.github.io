<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bluetata&#39;s Blog</title>
  <subtitle>技术只是解决问题的选择，而不是解决问题的根本!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bluetata.com.cn/"/>
  <updated>2017-03-08T07:26:53.830Z</updated>
  <id>http://bluetata.com.cn/</id>
  
  <author>
    <name>Sekito Lv</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>成为Java顶尖程序员 ，看这10本书就够了</title>
    <link href="http://bluetata.com.cn/2017/03/08/%E6%88%90%E4%B8%BAJava%E9%A1%B6%E5%B0%96%E7%A8%8B%E5%BA%8F%E5%91%98%20%EF%BC%8C%E7%9C%8B%E8%BF%9910%E6%9C%AC%E4%B9%A6%E5%B0%B1%E5%A4%9F%E4%BA%86/"/>
    <id>http://bluetata.com.cn/2017/03/08/成为Java顶尖程序员 ，看这10本书就够了/</id>
    <published>2017-03-08T07:26:13.034Z</published>
    <updated>2017-03-08T07:26:53.830Z</updated>
    
    <content type="html"><![CDATA[<p>“学习的最好途径就是看书“，这是我自己学习并且小有了一定的积累之后的第一体会。个人认为看书有两点好处：<br>\<br>　　1.能出版出来的书一定是经过反复的思考、雕琢和审核的，因此从专业性的角度来说，一本好书的价值远超其他资料</p>
<p>　　2.对着书上的代码自己敲的时候方便</p>
<p>　　“看完书之后再次提升自我的最好途径是看一些相关的好博文“，我个人认为这是学习的第二步，因为一本书往往有好几百页，好的博文是自己看书学习之后的一些总结和提炼，对于梳理学习的内容很有好处，当然这里不是说自己的学习方法，就不再扯下去了。</p>
<p>　　很多程序员们往往有看书的冲动，但不知道看哪些书，下面我就给各位Java程序猿们推荐一些好书（每本书的作者会加粗标红），其中绝大多数都是我自己平时在看的书，也算是我对于平时读的书做一个小总结和读后感吧。</p>
<p>　　首先推荐的不是一本书，而是一个博客，也是我们博客园另外一位博友java_my_life。</p>
<p>　　目前市面上讲解设计模式的书很多，虽然我前面讲了看书是最好的，但是对设计模式感兴趣的朋友们，我推荐的是这个博客。这位博友的设计模式讲得非常非常好，我认为90%的内容都是没有问题且很值得学习的，其讲解设计模式的大体路线是：</p>
<p>　　1、随便开篇点明该设计模式的定义</p>
<p>　　2、图文并茂讲解该设计模式中的结构</p>
<p>　　3、以详细的代码形式写一下该种设计模式的实现</p>
<p>　　4、补充内容</p>
<p>　　5、讲解该设计模式的优缺点</p>
<p>　　对于一个设计模式我们关注、学习的知识点，不就是上面这些吗？</p>
<p>　　不 过我要重点提醒一下网友们，同一种设计模式的写法有多种，并不是说只有按某种写法来写才是这种设计模式。比方说适配器模式，我们关注适配器模式一定要关注 的是什么是适配器模式不是怎么写适配器模式，不要认为某段代码不是按照适配器模式的写法写下来的它就不是适配器模式了，记住这一点，你在学习设计模式的时 候一定会对代码中用到的设计模式有更深入的理解。</p>
<p>　　《实战Java虚拟机：JVM故障诊断与性能优化》</p>
<p>　　如果你不满足于做一个只会写if…else…的Java程序员，而是希望更进一步，我随便举几个例子吧：</p>
<p>　　1、了解Java代码的底层运行机制</p>
<p>　　2、定位性能问题</p>
<p>　　3、对整个系统进行性能调优</p>
<p>　　4、解决各种奇奇怪怪的线上线下问题</p>
<p>　　　那 么Java虚拟机是你必学的一门技术。《实战Java虚拟机：JVM故障诊断与性能优化》写的很入门，技术也最新，新手也能看得懂，如果有java技术瓶颈的，看完会豁然开朗。</p>
<p>　　《HotSpot实战》<br>\<br>　　所有的Java虚拟机都是遵循着Java虚拟机规范来的，市面上的Java虚拟机几十款，《实战Java虚拟机：JVM故障诊断与性能优化》一书里面讲的虚拟机并不针对某种特定的虚拟机，而是从Java虚拟机规范的角度来讲解Java虚拟机。</p>
<p>　　我们平时使用的乃至商用的大多数Java虚拟机都是Sun公司的HotSpot，大家cmd进入命令行，使用”java -version”命令就可以看到了。如果希望在Java虚拟机规范的基础上更加深入地去理解虚拟机的一些细节是怎么实现的，就可以看一下《HotSpot实战》一书，作者是陈涛。不过由于HotSpot的源码都是C/C++写的，所以要求读者有非常好的C/C++基础，如果对这两门语言不是很熟悉的朋友，看这本书可能对你帮助不是很大。</p>
<p>　　最后提一句，如果有兴趣的朋友，不妨先去网上下载一个openJDK，HotSpot的源码就在里面。</p>
<p>　　《实战Java高并发程序设计》</p>
<p>javabing</p>
<p>　　这本书是目前点评推荐比较多的书，其特色是：</p>
<p>　　1、案例小，好实践</p>
<p>　　2、代码有场景，实用。</p>
<p> 　　无论如何，并发已经成为多核时代的趋势，还是一定要推荐给大家的。</p>
<p>　　《java多线程编程核心技术》<br>\<br>　　《Java多线程编程核心技术》作者高洪岩。想要学习多线程的朋友，这本书是我大力推荐的，我的个人博客里面二十多篇的多线程博文都是基于此书，并且在这本书的基础上进行提炼和总结而写出来的。</p>
<p>　　此书和《Java并发编程实战》 相反，这本书的特点是大篇幅的代码+小篇幅的精讲解，可能这和中国人写的书比较偏向实用主义的风格有关。本书关于线程安全、synchronized、 Reentrant、Timer等等都用详细的代码进行了讲解，而且每个大知识点下的多个小知识点都会详细讲解到，非常有实践价值。</p>
<p>　　有兴趣的朋友们，我相信只要你们跟着这本书里面的代码敲、运行、思考，三步走，对于多线程的使用与理解一定会进几大步。</p>
<p>　　不 过这本书的缺点就是对于Java并发包下的一些类像CountDownLatch、Semphore、CyclicBarrier、Future、 Callable等都没有讲到，重点的CAS和AQS也没有触及，重点类的实现原理也没有提。当然，这很深入了，在学习了这本书之后如果能再去对这些知识 进行一些学习、研究的话，你一定会慢慢成长为一个很厉害的多线程高手。</p>
<p>　　《Effective Java中文版》<br>\<br>　　这是唯一一本我没有买的书。初识这本书，是在我的博文Java代码优化（长期更新）里面，底下评论的时候有朋友提到了这本书，当时我说要去买，不过这两个月一直都没时间去逛书店，甚是遗憾，之后肯定会找时间去买这本书的。</p>
<p>　　《Effective Java中文版》的作者是Joshua Bloch，这个人就很厉害了，他是谷歌的首席架构师，属于超级技术大牛级别了吧，呵呵。由于没有看过这本书，所以我不好发表评论，但是从这本书的知名度 以及其作者的来头来看（多提一句，这本书也是Java之父James Gosling博士推崇的一本书），我相信这一定是一本值得一看的好书。</p>
<p>　　好 的代码是每个Java程序员都应该去追求的，不是说我今天写一段好代码相比写一段烂代码对性能会有多大的提升，更多的应该是提升了代码的可读性以及可以规 避许多潜在的、未知的问题，避免代码上线之后出问题而花时间去维护—-无论从时间成本、人力成本还是风险成本来说，这都是非常高的。</p>
<p>　　《深入分析Java Web技术内幕》<br>\<br>　　《深入分析Java Web技术内幕》，作者许令波，淘宝工程师。</p>
<p>　　这本书我用一个字概括就是：全。真的非常全，HTTP、DNS、CDN、静态化、Jetty、Tomcat、Servlet、spring、MyBatis等等，什么都有，涉及知识面非常广，但又不像专门精讲某个知识点的书籍一样讲得非常深入，感觉这本书就是尽量去用短的篇幅讲清楚一些Java Web使用到的技术的内幕，让读者对这些知识点的技术内幕有一个理性的认识。</p>
<p>　　不过，尽管每个知识点的篇幅都不多，但是重点都基本讲到了，是一本让人真正有收获的书。如果想进一步了解这些技术的技术内幕，就要自己去买相关书籍或者自己上网查资料了，有种抛砖引玉，或者说师傅领进门、修行在个人的感觉。</p>
<p>　　《大型网站技术架构 核心原理与案例分析》<br>\<br>　　一个字评价这本书，屌；两个字评价这本书，很屌；三个字评价这本书，非常屌。呵呵，好了，再说下去可能别人以为我是水军了。</p>
<p>　　《大型网站技术架构 核心原理与案例分析》的作者是李智慧，原阿里巴巴技术专家。</p>
<p>　　Java 的大多数应用都是用在Web上的，现在只要稍微大型一点的Web应用，都一定是一个分布式系统，那么一个分布式系统用到了哪些技术？一个大型网站是如何从 一个小型网站成长起来的？如何保证你的网站安全？分布式系统使用到了缓存，有哪些缓存？缓存的使用有哪些值得注意的事项？</p>
<p>　　关 于分布式的知识点，都在这本书里面有体现，只有你想不到，没有他写不到，而且写得非常易懂，基本属于看一两遍，再记一些笔记就知道是怎么一回事儿了。多看 几遍，对分布式的理解一定会加深不少。而且里面不仅仅是分布式的知识，还非常接地气地写了如何做一个好的架构师，其实我认为这不仅仅是写给想做架构师的读 者看的，就是给读者一些建议，如何更好地提出意见、如何更让别人关注你的声音、如何看到他人的优点，入木三分，让人获益匪浅。</p>
<p>　　《大型网站系统与Java中间件实践》<br>\<br>　　《大型网站系统与Java中间件实践》作者曾宪杰，是淘宝的技术总监，算起来应该在阿里有至少P8的级别了吧。</p>
<p>　　这本书的部分内容和上面一本李智慧的《大型网站技术架构 核心原理与案例分析》有所重合，像分布式系统的演化、CDN、CAP理论和BASE理论等等，这也更说明这些都是分布式系统或者说是一个大型网站重点关注的内容，当作一次再学习也不错。</p>
<p>　　本书要突出的重点是中间件三个字，中间件是分布式系统中一个非常重要的东西，其最重要的作用应该就是解耦，降低模块与模块之间的强依赖，不同的模块之间的依赖度降低，便可以各自独立地开发自己的功能，这也可以说是软件工程发展的目标和驱动力。</p>
<p>　　因此，本书有一部分的内容就是基于中间件，详细讲解了中间件与JMS的各种知识，适合对分布式系统比较熟悉并且想要往中间件方面有一定研究的读者。</p>
<p>　　《从Paxos到ZooKeeper 分布式一致性原理与实践》<br>\<br>　　《从Paxos到ZooKeeper 分布式一致性原理与实践》，作者倪超，阿里巴巴工程师。</p>
<p>　　这本书是我最近在研读的一本书，和上面的《大型网站系统与Java中间件实践》一样，属于分布式组件的范畴，属于有些深入的内容，当然也是我自己的个人兴趣。当然，如果有志向做一个出色的大型网站架构师、公司的技术总监之类，这些知识当然是必须掌握的。</p>
<p>　　本书从分布式系统基本理论开始讲起，讲到Paxos算法，最后慢慢引入到Zookeeper，循序渐进。当然，更多的我目前还不方便发表什么看法，因为这本书的第二张Paxos算法我都还没有弄懂（Paxos算法确实有些难以理解和不太易懂），接下来的章节还没有看下去。</p>
<p>　　如果网友们所在的公司在使用Zookeeper，并且你又对Zookeeper感兴趣想要研究一下它的原理的，这本书将是不二之选。</p>
<p>　　《Spring源码深度解析》<br>\<br>　　《Spring源码深度解析》，作者郝佳。</p>
<p>　　Spring 这个框架做得太好了，功能太强大了，以至于很多开发者都只知Spring，不知什么是工厂、什么是单例、什么是代理（我面试别人的真实体会）。这种功能强 大的框架内部一定是很复杂的实现，这就导致一旦你的程序使用Spring，出了问题，可能是Error、可能是Exception、可能是程序运行结果不 是你的预期的，出现诸如此类问题的时候，将会让你感到困惑，除了上网查资料或者问别人似乎没有更好的解决办法。</p>
<p>　　研读Spring的源代码不失为一种很好的学习方法，我个人认为这有很多好处：</p>
<p>　　1、理解框架内部的实现之后，可以主动去解决问题，而不需要依赖别人</p>
<p>　　2、Spring框架内部实现用到了很多设计模式，很好的代码设计思路，这将会对你写代码、对你理解设计模式有很大的提高</p>
<p>　　3、研究Spring框架将会大大增强你读代码的能力，我相信只要你能研究清楚Spring内部是如何实现的，其他任何一个框架的源代码都难不倒你</p>
<p>　　总而言之，我认为读代码的能力是一个普通的程序员和一个好的程序员之间最大的差别之一，前者只会把别人写好的东西拿来用，后者不仅能用好，还清楚知道别人写好的东西底层是如何实现的，在出现问题的时候可以轻松解决。</p>
<p>　　Spring源代码，个人推荐《Spring源码深度解析》一书，真要研究透并且写清楚Spring源代码，恐怕三四本书都不够，作者在近400页的篇幅中尽量去讲解Spring源代码是如何实现的，殊为不易，尽管无法讲得完全，但是相信作者的讲解配合上读者自己的研究，一定可以对Spring的实现有更深度的理解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“学习的最好途径就是看书“，这是我自己学习并且小有了一定的积累之后的第一体会。个人认为看书有两点好处：&lt;br&gt;\&lt;br&gt;　　1.能出版出来的书一定是经过反复的思考、雕琢和审核的，因此从专业性的角度来说，一本好书的价值远超其他资料&lt;/p&gt;
&lt;p&gt;　　2.对着书上的代码自己敲的
    
    </summary>
    
    
      <category term="程序人生" scheme="http://bluetata.com.cn/tags/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>Shift_JIS、CP932、MS932、Windows-31J</title>
    <link href="http://bluetata.com.cn/2017/03/05/Shift_JIS%E3%80%81CP932%E3%80%81MS932%E3%80%81Windows-31J/"/>
    <id>http://bluetata.com.cn/2017/03/05/Shift_JIS、CP932、MS932、Windows-31J/</id>
    <published>2017-03-04T16:52:03.482Z</published>
    <updated>2017-03-06T06:34:57.825Z</updated>
    
    <content type="html"><![CDATA[<p>　　Windows標準の文字コードはShift_JISではなく、Windows-31Jです。<br>　　それらの違いやCP932、MS932といった用語もあわせて整理してみましょう。</p>
<p>　　まずは<strong>Shift_JIS</strong>。<br>　　これは日本語の文字集合を符号化する文字符号化方式のうちの一つです。<br>　　Microsoftにより、MS-DOSの標準日本語コードとして採用され、<strong>CP932</strong>という管理番号を与えられるとともに独自の拡張が行われました。</p>
<p>　　MicrosoftはこのCP932を独自に拡張することを、OEMメーカー（MS-DOSを搭載したパソコンを販売するメーカー）に許していたため、各OEMメーカーごとに異なる拡張が行われました。</p>
<p>　　その後、MicrosoftはWindows3.1の日本語版を出すにあたり、OEMメーカーにCP932の独自拡張を許すという方針を撤回し、当時、日本のパソコン市場で特に大きなシェアを持っていたIBMとNECによって独自に拡張されたCP932を統合し、これをWindowsにおける日本語標準コードとしました。</p>
<p>　　Windowsの日本語標準コードとなったCP932は、<strong>IANA</strong>（インターネットに関連する番号を管理する組織）に<strong>Windows-31J</strong>という名前で登録されました。</p>
<p>　　Javaの世界では、IBMのCP932とWindows-31Jを区別するために、<strong>MS932</strong>という用語が使われます。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olo4ewtc9.bkt.clouddn.com/Windows%E6%A8%99%E6%BA%96%E3%81%AE%E6%96%87%E5%AD%97%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AFShift_JIS%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%8F%E3%80%81Windows-31J%E3%81%A7%E3%81%99%E3%80%82.png" alt="codemap" title="">
                </div>
                <div class="image-caption">codemap</div>
            </figure>
<p>　　上の図からもわかるように、「CP932」、「MS932」、「Windows-31J」は同じものをさしています。そしてそれは「Shift_JIS」とは異なるものですが、実際には「Windows-31J」をさす場合に「Shift_JIS」という言葉が使われることが多々あります。</p>
<p>　　たいていの場合はそれで問題ないかもしれませんが、プログラミングにおいて、文字コードに「Windows-31J」と指定すべきところを、「Shift_JIS」と指定したがゆえに、<strong>文字化け</strong>を引き起こすことがあります。「Windows-31J」で定義されている文字が「Shift_JIS」にはない場合です。</p>
<p>　　プログラミングをする場合にはしっかりおさえておきたいところです。</p>
<p>译文：</p>
<p>　　Windows 标准字符集不是Shift_JIS、而是Windows-31J<br>　　顺便CP932、MS932的相关术语我也尝试整理下。</p>
<p>　　首先<strong>Shift_JIS</strong>。<br>　　Shift_JIS是日文的一种字符集、Microsoft的MS-DOS采用Shift_JIS<br>作为日语标准编码、并命名为CP932(同理GBK相应为CP936、可以在Windows的cmd.exe中输入chcp查看)</p>
<p>　　开始，Microsoft允许各OEM厂商在<strong>CP932</strong>的基础上进行扩展、所以造成了各个OEM厂商的字符集都不一样。</p>
<p>　　后来，截止到Windows3.1日语版、Microsoft限制了各OEM厂商对字符集的扩展。而当时、日本计算机市场基本被IBM和NEC占领、他们都是在CP932的基础上进行的扩展、所以日语的标准字符集就变成了CP932了、<strong>IANA</strong>(The Internet Assigned Numbers Authority、互联网数字分配机构)把它命名为<strong>Windows-31J</strong>。</p>
<p>　　在Java中、为了区分IBM的CP932和Windows-31J、所以用<strong>MS932</strong>来表示了。</p>
<p>（贴图）</p>
<p>　　上图中可以看出CP932、MS932、Windows-31J都是同一个东西。但他们和「Shift_JIS」是不同的、与「Windows-31J」相比、「Shift_JIS」的说法更多。</p>
<p>　　一般情况同样的使用是没有问题的、在程序中、一般适用「Windows-31J」的地方如果使用「Shift_JIS」可能会有<strong>乱码</strong>、但反过来、适用「Shift_JIS」的地方用「Windows-31J」就没问题。</p>
<p>　　在编程的时候、这个地方是需要斟酌推敲的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　Windows標準の文字コードはShift_JISではなく、Windows-31Jです。&lt;br&gt;　　それらの違いやCP932、MS932といった用語もあわせて整理してみましょう。&lt;/p&gt;
&lt;p&gt;　　まずは&lt;strong&gt;Shift_JIS&lt;/strong&gt;。&lt;br&gt;　　
    
    </summary>
    
    
      <category term="字符集" scheme="http://bluetata.com.cn/tags/%E5%AD%97%E7%AC%A6%E9%9B%86/"/>
    
      <category term="编码格式" scheme="http://bluetata.com.cn/tags/%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java相比Python3有哪些优势？</title>
    <link href="http://bluetata.com.cn/2017/03/01/java%20vs%20python3/"/>
    <id>http://bluetata.com.cn/2017/03/01/java vs python3/</id>
    <published>2017-02-28T17:04:56.612Z</published>
    <updated>2017-02-28T17:19:21.561Z</updated>
    
    <content type="html"><![CDATA[<p>事情是这样的，这个问题你要问我的话，答案肯定是这样的“Java是最好的语言，不解释”。但为了世界和平，我们抱着科学严谨的态度来深入探讨一下Java和Python的那些事儿~<strong>强调文字</strong></p>
<p>在项目类型上，Java更适合大型项目，易于管理和维护；Python3更适合写一些小项目，便于更新迭代。在大项目上的应用，除开那种密集计算型的项目，我敢说Java世界上最好的语言！一般用户在百万+千万不到的时候，并发变高、内存不够，但是优化一下好像还可以接着用，此时Java的优势就显现出来了。虽然Python可以拓展C语言，但终究比较麻烦。这时jvm的作用就要体现了！找个熟悉jvm的大牛，优化效率就能飙升啊~</p>
<p>如果是采用面向对象方式开发软件，Java/C#之类的事更加适合的语言选择。特别是一些大规模且逻辑复杂、处理流程多样化的软件系统，从分析、设计、实现到面向对象贯穿下来，动态类型的语言显然不是最好的选择，这种语言的灵活性在这种情境下带来的更多可能是麻烦。<strong>强调文字</strong></p>
<p>在性能上，我说Java的性能比Python的性能好应该没有人打我吧，而且又是多线程~并且Java的库又多又是纯字节，你说我有什么理由不爱它？还有Java没有2、3、4啊！！</p>
<p>最后，我怎么也得夸一下我Java好，你们都听好了！我们写Java的人多啊！！！怎么，爱我你怕了吗~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事情是这样的，这个问题你要问我的话，答案肯定是这样的“Java是最好的语言，不解释”。但为了世界和平，我们抱着科学严谨的态度来深入探讨一下Java和Python的那些事儿~&lt;strong&gt;强调文字&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在项目类型上，Java更适合大型项目，易于管
    
    </summary>
    
    
      <category term="Java" scheme="http://bluetata.com.cn/tags/Java/"/>
    
      <category term="逗比程序员" scheme="http://bluetata.com.cn/tags/%E9%80%97%E6%AF%94%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>优秀程序员因何而优秀？</title>
    <link href="http://bluetata.com.cn/2017/02/28/the%20reasion%20of%20programer/"/>
    <id>http://bluetata.com.cn/2017/02/28/the reasion of programer/</id>
    <published>2017-02-28T09:02:44.259Z</published>
    <updated>2017-02-28T09:06:24.593Z</updated>
    
    <content type="html"><![CDATA[<p>（via:程序师）</p>
<p>这些年我曾和很多程序员一起工作，他们之中的一些人非常厉害，而另一些人显得平庸。不久前因为和一些技术非常熟练的程序员工作感觉很愉快，我花了一些时间在考虑我佩服他们什么呢？什么原因让优秀的程序员那么优秀，糟糕的程序员那么糟糕？简而言之，什么原因成就了一位优秀的程序员呢？</p>
<p>根据我的经验，成为一个优秀程序员同年龄，教育程度，还有和你赚多少钱没有任何关系。关键在于你的做法，更深入地说，就是你的想法。我注意到我所钦佩的程序员都有一些相似习惯。不是他们所选语言的知识，也不是对数据结构和算法的深入理解，甚至不是多年的工作经验。而是他们的沟通方式，他们管理自己的方式，以及以他们精湛技术水平编程演讲的方式。</p>
<p>当然成为一个优秀的程序员还要具备更多特质，我也不能单单依靠是否存在（或者缺少）这些特质来评判一个程序员。但是我知道当我看见它，当我看见一个程序员具备这些特质的时候，我认为，“这个人真的知道他们正在做什么”。</p>
<p><strong>优秀程序员做调查研究</strong><br>或者叫“三思而后行”，或者叫“谷歌一下”</p>
<p>不论你怎么称呼它，大多数可能会遇到的编程问题已经以某种形式解决，传道书早就记载着世界上本来就没有什么新鲜事。优秀的程序员在解决问题之前知道通过GitHub图书馆、网络博客，或者通过与经验丰富的程序员交流等形式来做调查研究。</p>
<p>我见过甚至是优秀的程序员可以快速找出解决方案，但是和我一起工作过的糟糕的程序员从来不求助于他人，结果做了大量的重复工作或者错误地解决问题，不幸的是，后来他们终将为自己犯下的错误付出了代价。</p>
<p><strong>优秀程序员阅读错误信息（并按照它们行事）</strong><br>这包括解析堆栈路径信息。是的，这是一件非常丑陋不幸的事情。但是如果你不愿意这么做的话，你怎么才能知道哪里错了呢？我知道的高效程序员是不会害怕深究问题的。低效的程序员看见有错误，但就是不愿意甚至是去读这些错误信息。（这听起来很可笑，但你会惊讶我遇到它的频率）</p>
<p>更进一步地说，优秀的程序员发现问题马上就解决它。读错误信息对他们来说仅仅是个开始，他们渴望深究问题并查出问题的根源。他们不喜欢推卸责任，而是愿意查找解决问题的方案，问题在他们这里止步。</p>
<p><strong>优秀程序员看源代码</strong><br>文档、测试、团队，这些都会说谎。尽管不是故意的，但是如果你想确切地知道事情是怎么回事，你必须自己亲自看源代码。</p>
<p>如果它不是你最擅长的语言，你也不要害怕。如果你是一个Ruby的程序员，你怀疑在Ruby的C语言库中有个错误，破解打开看看。是的，你可能拿不到源代码，但是谁知道呢？你只是可能而已，你有更好的机会，总比你根本不去尝试好吧。</p>
<p>不幸的是，如果你处在一个封闭源代码的环境中，这会变得非常难，但道理是不变的。糟糕的程序员对于查看源代码没有丝毫的兴趣，结果问题困扰他们时间，要比愿意看源代码的时间长得多。</p>
<p><strong>优秀程序员说干就干</strong><br>优秀的程序员趋向于主动去做。他们的内心有着难以控制的冲动，当他们确定问题或者发现新的需求时他们立刻会实现解决方案，有时过早有时太过激进。但是他们对问题本能的反应是正面解决问题。</p>
<p>有时这会令人很烦恼，但是他们的热情是他们做好事情的一个重要部分。一些人可能拖延时间回避问题或者等待问题自己能够消失，然而优秀的程序员一开始就解决它。简而言之（或者显而易见），如果你看见有人兴致勃勃地查找问题并在解决，很可能你的手下有位优秀的程序员。</p>
<p><strong>优秀程序员不逃避困难</strong><br>这通常是糟糕程序员的特点：他们轻易地从一个问题跳到另一个问题，在没有真正理解一个问题之前就进入到下一个问题。他们会把责任归咎于程序的错误，然后花费大把的时间调试已经运行良好的代码。他们让情感占据主动，相信直觉，而不是仔细严谨的分析。</p>
<p>如果你匆匆忙忙地解决一个问题，甚至视每一个问题为震惊世界的灾难。你很可能犯错误或者没有解决潜在的问题。优秀的程序员花时间去了解发生了什么错误，哪怕灾难来临的时候；但更重要的是，他们对待平常的问题像是要解决的重要问题，因此他们更准确地解决更多的问题，并且这样做没有提高团队的紧张程度。</p>
<p><strong>优秀程序员善于沟通交流</strong><br>说到底，编程是一种形式的沟通交流。写代码和写散文创作一样，能够简洁地表达你的想法很重要。我发现那些可以写简洁邮件，优雅的状态报告，或者甚至只是一个有效的备忘录的程序员也将会是优秀的程序员。</p>
<p>这能应用在写代码还有英语上。用圆括号、括号和单个字母的函数写出一行代码当然是有可能的，但是如果没有人理解它，有什么意义呢。优秀的程序员会花时间以各种渠道交流他们的想法。</p>
<p><strong>优秀程序员激情四射</strong><br>我认为这可能是优秀的程序员最重要的方面（也许这点也适用于除计算机科学领域的其它领域）</p>
<p>如果你真的在乎你所做的事情，如果不把它当成工作，当作一个业余爱好、兴趣或一件很有吸引力的事情，那么在该领域你比其他人更有优势。优秀的程序员一直不断编程。普通程序员一天工作八小时，并且没有业余项目，也没兴趣回馈社区。他们不会不断地尝试新方法，而只是为了看看它们是如何运行而执着于编程语言。</p>
<p>当我看见一个程序员利用周末的时间做自己喜欢的项目时，参与创作他们每天能用到的工具时，执着于新的有意义的事情时：那个时候我确信我眼前的是一个令人惊奇的人。最后，优秀的程序员视他们的职业不仅仅是赚钱的途径，更是让生活变得有些不同的方法。我认为那就是成就最优秀程序员的真正原因。对于他们来说，编写代码是改变世界的一种方法，也是我非常尊敬崇拜他们的原因。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（via:程序师）&lt;/p&gt;
&lt;p&gt;这些年我曾和很多程序员一起工作，他们之中的一些人非常厉害，而另一些人显得平庸。不久前因为和一些技术非常熟练的程序员工作感觉很愉快，我花了一些时间在考虑我佩服他们什么呢？什么原因让优秀的程序员那么优秀，糟糕的程序员那么糟糕？简而言之，什么原因
    
    </summary>
    
    
      <category term="程序人生" scheme="http://bluetata.com.cn/tags/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
</feed>
